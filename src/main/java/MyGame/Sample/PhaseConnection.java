// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Sample;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PhaseConnection extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static PhaseConnection getRootAsPhaseConnection(ByteBuffer _bb) { return getRootAsPhaseConnection(_bb, new PhaseConnection()); }
  public static PhaseConnection getRootAsPhaseConnection(ByteBuffer _bb, PhaseConnection obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PhaseConnection __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String connectionId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer connectionIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer connectionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String prevPhaseId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer prevPhaseIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer prevPhaseIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String nextPhaseId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nextPhaseIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer nextPhaseIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createPhaseConnection(FlatBufferBuilder builder,
      int connectionIdOffset,
      int prevPhaseIdOffset,
      int nextPhaseIdOffset) {
    builder.startTable(3);
    PhaseConnection.addNextPhaseId(builder, nextPhaseIdOffset);
    PhaseConnection.addPrevPhaseId(builder, prevPhaseIdOffset);
    PhaseConnection.addConnectionId(builder, connectionIdOffset);
    return PhaseConnection.endPhaseConnection(builder);
  }

  public static void startPhaseConnection(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addConnectionId(FlatBufferBuilder builder, int connectionIdOffset) { builder.addOffset(0, connectionIdOffset, 0); }
  public static void addPrevPhaseId(FlatBufferBuilder builder, int prevPhaseIdOffset) { builder.addOffset(1, prevPhaseIdOffset, 0); }
  public static void addNextPhaseId(FlatBufferBuilder builder, int nextPhaseIdOffset) { builder.addOffset(2, nextPhaseIdOffset, 0); }
  public static int endPhaseConnection(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PhaseConnection get(int j) { return get(new PhaseConnection(), j); }
    public PhaseConnection get(PhaseConnection obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

