// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Sample;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SentimentAnalysis extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static SentimentAnalysis getRootAsSentimentAnalysis(ByteBuffer _bb) { return getRootAsSentimentAnalysis(_bb, new SentimentAnalysis()); }
  public static SentimentAnalysis getRootAsSentimentAnalysis(ByteBuffer _bb, SentimentAnalysis obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SentimentAnalysis __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double currentSentiment() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double trendingSentiment() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double totalSentiment() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double messageCount() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double averageSentiment() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createSentimentAnalysis(FlatBufferBuilder builder,
      double currentSentiment,
      double trendingSentiment,
      double totalSentiment,
      double messageCount,
      double averageSentiment) {
    builder.startTable(5);
    SentimentAnalysis.addAverageSentiment(builder, averageSentiment);
    SentimentAnalysis.addMessageCount(builder, messageCount);
    SentimentAnalysis.addTotalSentiment(builder, totalSentiment);
    SentimentAnalysis.addTrendingSentiment(builder, trendingSentiment);
    SentimentAnalysis.addCurrentSentiment(builder, currentSentiment);
    return SentimentAnalysis.endSentimentAnalysis(builder);
  }

  public static void startSentimentAnalysis(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addCurrentSentiment(FlatBufferBuilder builder, double currentSentiment) { builder.addDouble(0, currentSentiment, 0.0); }
  public static void addTrendingSentiment(FlatBufferBuilder builder, double trendingSentiment) { builder.addDouble(1, trendingSentiment, 0.0); }
  public static void addTotalSentiment(FlatBufferBuilder builder, double totalSentiment) { builder.addDouble(2, totalSentiment, 0.0); }
  public static void addMessageCount(FlatBufferBuilder builder, double messageCount) { builder.addDouble(3, messageCount, 0.0); }
  public static void addAverageSentiment(FlatBufferBuilder builder, double averageSentiment) { builder.addDouble(4, averageSentiment, 0.0); }
  public static int endSentimentAnalysis(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SentimentAnalysis get(int j) { return get(new SentimentAnalysis(), j); }
    public SentimentAnalysis get(SentimentAnalysis obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

