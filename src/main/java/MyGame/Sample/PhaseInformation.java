// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Sample;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PhaseInformation extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static PhaseInformation getRootAsPhaseInformation(ByteBuffer _bb) { return getRootAsPhaseInformation(_bb, new PhaseInformation()); }
  public static PhaseInformation getRootAsPhaseInformation(ByteBuffer _bb, PhaseInformation obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PhaseInformation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String startPhaseId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startPhaseIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer startPhaseIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public MyGame.Sample.PhaseNode phaseNodes(int j) { return phaseNodes(new MyGame.Sample.PhaseNode(), j); }
  public MyGame.Sample.PhaseNode phaseNodes(MyGame.Sample.PhaseNode obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int phaseNodesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public MyGame.Sample.PhaseNode.Vector phaseNodesVector() { return phaseNodesVector(new MyGame.Sample.PhaseNode.Vector()); }
  public MyGame.Sample.PhaseNode.Vector phaseNodesVector(MyGame.Sample.PhaseNode.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public MyGame.Sample.PhaseConnection phaseConnections(int j) { return phaseConnections(new MyGame.Sample.PhaseConnection(), j); }
  public MyGame.Sample.PhaseConnection phaseConnections(MyGame.Sample.PhaseConnection obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int phaseConnectionsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public MyGame.Sample.PhaseConnection.Vector phaseConnectionsVector() { return phaseConnectionsVector(new MyGame.Sample.PhaseConnection.Vector()); }
  public MyGame.Sample.PhaseConnection.Vector phaseConnectionsVector(MyGame.Sample.PhaseConnection.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPhaseInformation(FlatBufferBuilder builder,
      int startPhaseIdOffset,
      int phaseNodesOffset,
      int phaseConnectionsOffset) {
    builder.startTable(3);
    PhaseInformation.addPhaseConnections(builder, phaseConnectionsOffset);
    PhaseInformation.addPhaseNodes(builder, phaseNodesOffset);
    PhaseInformation.addStartPhaseId(builder, startPhaseIdOffset);
    return PhaseInformation.endPhaseInformation(builder);
  }

  public static void startPhaseInformation(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addStartPhaseId(FlatBufferBuilder builder, int startPhaseIdOffset) { builder.addOffset(0, startPhaseIdOffset, 0); }
  public static void addPhaseNodes(FlatBufferBuilder builder, int phaseNodesOffset) { builder.addOffset(1, phaseNodesOffset, 0); }
  public static int createPhaseNodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPhaseNodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPhaseConnections(FlatBufferBuilder builder, int phaseConnectionsOffset) { builder.addOffset(2, phaseConnectionsOffset, 0); }
  public static int createPhaseConnectionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPhaseConnectionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPhaseInformation(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PhaseInformation get(int j) { return get(new PhaseInformation(), j); }
    public PhaseInformation get(PhaseInformation obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

