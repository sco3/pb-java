# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Sample

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConversationStreamMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConversationStreamMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConversationStreamMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConversationStreamMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConversationStreamMessage
    def SequenceNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConversationStreamMessage
    def Content(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ConversationStreamMessage
    def ContentAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ConversationStreamMessage
    def ContentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConversationStreamMessage
    def ContentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # ConversationStreamMessage
    def DateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConversationStreamMessage
    def SessionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConversationStreamMessage
    def SubscriberId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConversationStreamMessage
    def ApplicationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConversationStreamMessage
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ConversationStreamMessage
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConversationStreamMessage
    def Destination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConversationStreamMessage
    def DocSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ConversationStreamMessageStart(builder):
    builder.StartObject(10)

def Start(builder):
    ConversationStreamMessageStart(builder)

def ConversationStreamMessageAddSequenceNumber(builder, sequenceNumber):
    builder.PrependInt32Slot(0, sequenceNumber, 0)

def AddSequenceNumber(builder, sequenceNumber):
    ConversationStreamMessageAddSequenceNumber(builder, sequenceNumber)

def ConversationStreamMessageAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def AddContent(builder, content):
    ConversationStreamMessageAddContent(builder, content)

def ConversationStreamMessageStartContentVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartContentVector(builder, numElems: int) -> int:
    return ConversationStreamMessageStartContentVector(builder, numElems)

def ConversationStreamMessageAddDateTime(builder, dateTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dateTime), 0)

def AddDateTime(builder, dateTime):
    ConversationStreamMessageAddDateTime(builder, dateTime)

def ConversationStreamMessageAddSessionId(builder, sessionId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sessionId), 0)

def AddSessionId(builder, sessionId):
    ConversationStreamMessageAddSessionId(builder, sessionId)

def ConversationStreamMessageAddSubscriberId(builder, subscriberId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(subscriberId), 0)

def AddSubscriberId(builder, subscriberId):
    ConversationStreamMessageAddSubscriberId(builder, subscriberId)

def ConversationStreamMessageAddApplicationName(builder, applicationName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(applicationName), 0)

def AddApplicationName(builder, applicationName):
    ConversationStreamMessageAddApplicationName(builder, applicationName)

def ConversationStreamMessageAddMessageType(builder, messageType):
    builder.PrependInt8Slot(6, messageType, 0)

def AddMessageType(builder, messageType):
    ConversationStreamMessageAddMessageType(builder, messageType)

def ConversationStreamMessageAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    ConversationStreamMessageAddSource(builder, source)

def ConversationStreamMessageAddDestination(builder, destination):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(destination), 0)

def AddDestination(builder, destination):
    ConversationStreamMessageAddDestination(builder, destination)

def ConversationStreamMessageAddDocSource(builder, docSource):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(docSource), 0)

def AddDocSource(builder, docSource):
    ConversationStreamMessageAddDocSource(builder, docSource)

def ConversationStreamMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return ConversationStreamMessageEnd(builder)
