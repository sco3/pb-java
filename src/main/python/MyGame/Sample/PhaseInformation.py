# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Sample

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PhaseInformation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PhaseInformation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPhaseInformation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PhaseInformation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PhaseInformation
    def StartPhaseId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PhaseInformation
    def PhaseNodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MyGame.Sample.PhaseNode import PhaseNode
            obj = PhaseNode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PhaseInformation
    def PhaseNodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PhaseInformation
    def PhaseNodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # PhaseInformation
    def PhaseConnections(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MyGame.Sample.PhaseConnection import PhaseConnection
            obj = PhaseConnection()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PhaseInformation
    def PhaseConnectionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PhaseInformation
    def PhaseConnectionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def PhaseInformationStart(builder):
    builder.StartObject(3)

def Start(builder):
    PhaseInformationStart(builder)

def PhaseInformationAddStartPhaseId(builder, startPhaseId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(startPhaseId), 0)

def AddStartPhaseId(builder, startPhaseId):
    PhaseInformationAddStartPhaseId(builder, startPhaseId)

def PhaseInformationAddPhaseNodes(builder, phaseNodes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(phaseNodes), 0)

def AddPhaseNodes(builder, phaseNodes):
    PhaseInformationAddPhaseNodes(builder, phaseNodes)

def PhaseInformationStartPhaseNodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPhaseNodesVector(builder, numElems: int) -> int:
    return PhaseInformationStartPhaseNodesVector(builder, numElems)

def PhaseInformationAddPhaseConnections(builder, phaseConnections):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(phaseConnections), 0)

def AddPhaseConnections(builder, phaseConnections):
    PhaseInformationAddPhaseConnections(builder, phaseConnections)

def PhaseInformationStartPhaseConnectionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPhaseConnectionsVector(builder, numElems: int) -> int:
    return PhaseInformationStartPhaseConnectionsVector(builder, numElems)

def PhaseInformationEnd(builder):
    return builder.EndObject()

def End(builder):
    return PhaseInformationEnd(builder)
