# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Sample

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MemoryField(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MemoryField()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMemoryField(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MemoryField
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MemoryField
    def FieldName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryField
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryField
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryField
    def ContextWords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MemoryField
    def ContextWordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MemoryField
    def ContextWordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def MemoryFieldStart(builder):
    builder.StartObject(4)

def Start(builder):
    MemoryFieldStart(builder)

def MemoryFieldAddFieldName(builder, fieldName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fieldName), 0)

def AddFieldName(builder, fieldName):
    MemoryFieldAddFieldName(builder, fieldName)

def MemoryFieldAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    MemoryFieldAddDescription(builder, description)

def MemoryFieldAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def AddContent(builder, content):
    MemoryFieldAddContent(builder, content)

def MemoryFieldAddContextWords(builder, contextWords):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(contextWords), 0)

def AddContextWords(builder, contextWords):
    MemoryFieldAddContextWords(builder, contextWords)

def MemoryFieldStartContextWordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartContextWordsVector(builder, numElems: int) -> int:
    return MemoryFieldStartContextWordsVector(builder, numElems)

def MemoryFieldEnd(builder):
    return builder.EndObject()

def End(builder):
    return MemoryFieldEnd(builder)
