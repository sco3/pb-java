# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Sample

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PhaseNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PhaseNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPhaseNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # PhaseNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PhaseNode
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PhaseNode
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PhaseNode
    def Goals(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MyGame.Sample.GoalItem import GoalItem
            obj = GoalItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PhaseNode
    def GoalsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PhaseNode
    def GoalsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # PhaseNode
    def Checklist(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from MyGame.Sample.ChecklistItem import ChecklistItem
            obj = ChecklistItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PhaseNode
    def ChecklistLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PhaseNode
    def ChecklistIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def PhaseNodeStart(builder):
    builder.StartObject(4)

def Start(builder):
    PhaseNodeStart(builder)

def PhaseNodeAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    PhaseNodeAddId(builder, id)

def PhaseNodeAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    PhaseNodeAddName(builder, name)

def PhaseNodeAddGoals(builder, goals):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(goals), 0)

def AddGoals(builder, goals):
    PhaseNodeAddGoals(builder, goals)

def PhaseNodeStartGoalsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGoalsVector(builder, numElems: int) -> int:
    return PhaseNodeStartGoalsVector(builder, numElems)

def PhaseNodeAddChecklist(builder, checklist):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(checklist), 0)

def AddChecklist(builder, checklist):
    PhaseNodeAddChecklist(builder, checklist)

def PhaseNodeStartChecklistVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartChecklistVector(builder, numElems: int) -> int:
    return PhaseNodeStartChecklistVector(builder, numElems)

def PhaseNodeEnd(builder):
    return builder.EndObject()

def End(builder):
    return PhaseNodeEnd(builder)
