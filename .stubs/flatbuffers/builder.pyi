from . import compat as compat, encode as encode, packer as packer
from .compat import NumpyRequiredForThisFeature as NumpyRequiredForThisFeature, import_numpy as import_numpy, memoryview_type as memoryview_type, range_func as range_func
from .number_types import SOffsetTFlags as SOffsetTFlags, UOffsetTFlags as UOffsetTFlags, VOffsetTFlags as VOffsetTFlags
from _typeshed import Incomplete

np: Incomplete

class OffsetArithmeticError(RuntimeError): ...
class IsNotNestedError(RuntimeError): ...
class IsNestedError(RuntimeError): ...
class StructIsNotInlineError(RuntimeError): ...
class BuilderSizeError(RuntimeError): ...
class BuilderNotFinishedError(RuntimeError): ...
class EndVectorLengthMismatched(RuntimeError): ...

VtableMetadataFields: int

class Builder:
    MAX_BUFFER_SIZE: Incomplete
    Bytes: Incomplete
    current_vtable: Incomplete
    head: Incomplete
    minalign: int
    objectEnd: Incomplete
    vtables: Incomplete
    nested: bool
    forceDefaults: bool
    sharedStrings: Incomplete
    finished: bool
    def __init__(self, initialSize: int = 1024) -> None: ...
    def Output(self): ...
    def StartObject(self, numfields) -> None: ...
    def WriteVtable(self): ...
    def EndObject(self): ...
    def growByteBuffer(self) -> None: ...
    def Head(self): ...
    def Offset(self): ...
    def Pad(self, n) -> None: ...
    def Prep(self, size, additionalBytes) -> None: ...
    def PrependSOffsetTRelative(self, off) -> None: ...
    def PrependUOffsetTRelative(self, off) -> None: ...
    vectorNumElems: Incomplete
    def StartVector(self, elemSize, numElems, alignment): ...
    def EndVector(self, numElems: Incomplete | None = None): ...
    def CreateSharedString(self, s, encoding: str = 'utf-8', errors: str = 'strict'): ...
    def CreateString(self, s, encoding: str = 'utf-8', errors: str = 'strict'): ...
    def CreateByteVector(self, x): ...
    def CreateNumpyVector(self, x): ...
    def assertNested(self) -> None: ...
    def assertNotNested(self) -> None: ...
    def assertStructIsInline(self, obj) -> None: ...
    def Slot(self, slotnum) -> None: ...
    def Finish(self, rootTable, file_identifier: Incomplete | None = None): ...
    def FinishSizePrefixed(self, rootTable, file_identifier: Incomplete | None = None): ...
    def Prepend(self, flags, off) -> None: ...
    def PrependSlot(self, flags, o, x, d) -> None: ...
    def PrependBoolSlot(self, *args) -> None: ...
    def PrependByteSlot(self, *args) -> None: ...
    def PrependUint8Slot(self, *args) -> None: ...
    def PrependUint16Slot(self, *args) -> None: ...
    def PrependUint32Slot(self, *args) -> None: ...
    def PrependUint64Slot(self, *args) -> None: ...
    def PrependInt8Slot(self, *args) -> None: ...
    def PrependInt16Slot(self, *args) -> None: ...
    def PrependInt32Slot(self, *args) -> None: ...
    def PrependInt64Slot(self, *args) -> None: ...
    def PrependFloat32Slot(self, *args) -> None: ...
    def PrependFloat64Slot(self, *args) -> None: ...
    def PrependUOffsetTRelativeSlot(self, o, x, d) -> None: ...
    def PrependStructSlot(self, v, x, d) -> None: ...
    def PrependBool(self, x) -> None: ...
    def PrependByte(self, x) -> None: ...
    def PrependUint8(self, x) -> None: ...
    def PrependUint16(self, x) -> None: ...
    def PrependUint32(self, x) -> None: ...
    def PrependUint64(self, x) -> None: ...
    def PrependInt8(self, x) -> None: ...
    def PrependInt16(self, x) -> None: ...
    def PrependInt32(self, x) -> None: ...
    def PrependInt64(self, x) -> None: ...
    def PrependFloat32(self, x) -> None: ...
    def PrependFloat64(self, x) -> None: ...
    def ForceDefaults(self, forceDefaults) -> None: ...
    def PrependVOffsetT(self, x) -> None: ...
    def Place(self, x, flags) -> None: ...
    def PlaceVOffsetT(self, x) -> None: ...
    def PlaceSOffsetT(self, x) -> None: ...
    def PlaceUOffsetT(self, x) -> None: ...

def vtableEqual(a, objectStart, b): ...
