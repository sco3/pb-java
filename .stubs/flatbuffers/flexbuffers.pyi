import enum
from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['Type', 'Builder', 'GetRoot', 'Dumps', 'Loads']

class BitWidth(enum.IntEnum):
    W8 = 0
    W16 = 1
    W32 = 2
    W64 = 3
    @staticmethod
    def U(value): ...
    @staticmethod
    def I(value): ...
    @staticmethod
    def F(value): ...
    @staticmethod
    def B(byte_width): ...

class Type(enum.IntEnum):
    NULL = 0
    INT = 1
    UINT = 2
    FLOAT = 3
    KEY = 4
    STRING = 5
    INDIRECT_INT = 6
    INDIRECT_UINT = 7
    INDIRECT_FLOAT = 8
    MAP = 9
    VECTOR = 10
    VECTOR_INT = 11
    VECTOR_UINT = 12
    VECTOR_FLOAT = 13
    VECTOR_KEY = 14
    VECTOR_STRING_DEPRECATED = 15
    VECTOR_INT2 = 16
    VECTOR_UINT2 = 17
    VECTOR_FLOAT2 = 18
    VECTOR_INT3 = 19
    VECTOR_UINT3 = 20
    VECTOR_FLOAT3 = 21
    VECTOR_INT4 = 22
    VECTOR_UINT4 = 23
    VECTOR_FLOAT4 = 24
    BLOB = 25
    BOOL = 26
    VECTOR_BOOL = 36
    @staticmethod
    def Pack(type_, bit_width): ...
    @staticmethod
    def Unpack(packed_type): ...
    @staticmethod
    def IsInline(type_): ...
    @staticmethod
    def IsTypedVector(type_): ...
    @staticmethod
    def IsTypedVectorElementType(type_): ...
    @staticmethod
    def ToTypedVectorElementType(type_): ...
    @staticmethod
    def IsFixedTypedVector(type_): ...
    @staticmethod
    def IsFixedTypedVectorElementType(type_): ...
    @staticmethod
    def ToFixedTypedVectorElementType(type_): ...
    @staticmethod
    def ToTypedVector(element_type, fixed_len: int = 0): ...

class Buf:
    def __init__(self, buf, offset) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def Find(self, sub): ...
    def Slice(self, offset): ...
    def Indirect(self, offset, byte_width): ...

class Object:
    def __init__(self, buf, byte_width) -> None: ...
    @property
    def ByteWidth(self): ...

class Sized(Object):
    def __init__(self, buf, byte_width, size: int = 0) -> None: ...
    @property
    def SizeBytes(self): ...
    def __len__(self) -> int: ...

class Blob(Sized):
    @property
    def Bytes(self): ...

class String(Sized):
    @property
    def Bytes(self): ...
    def Mutate(self, value): ...

class Key(Object):
    def __init__(self, buf, byte_width) -> None: ...
    @property
    def Bytes(self): ...
    def __len__(self) -> int: ...

class Vector(Sized):
    def __getitem__(self, index): ...
    @property
    def Value(self): ...

class TypedVector(Sized):
    def __init__(self, buf, byte_width, element_type, size: int = 0) -> None: ...
    @property
    def Bytes(self): ...
    @property
    def ElementType(self): ...
    def __getitem__(self, index): ...
    @property
    def Value(self): ...

class Map(Vector):
    @staticmethod
    def CompareKeys(a, b): ...
    def __getitem__(self, key): ...
    @property
    def Keys(self): ...
    @property
    def Values(self): ...
    @property
    def Value(self): ...

class Ref:
    @staticmethod
    def PackedType(buf, parent_width, packed_type): ...
    def __init__(self, buf, parent_width, byte_width, type_) -> None: ...
    @property
    def IsNull(self): ...
    @property
    def IsBool(self): ...
    @property
    def AsBool(self): ...
    def MutateBool(self, value): ...
    @property
    def IsNumeric(self): ...
    @property
    def IsInt(self): ...
    @property
    def AsInt(self): ...
    def MutateInt(self, value): ...
    @property
    def IsFloat(self): ...
    @property
    def AsFloat(self): ...
    def MutateFloat(self, value): ...
    @property
    def IsKey(self): ...
    @property
    def AsKeyBytes(self): ...
    @property
    def AsKey(self): ...
    @property
    def IsString(self): ...
    @property
    def AsStringBytes(self): ...
    @property
    def AsString(self): ...
    def MutateString(self, value): ...
    @property
    def IsBlob(self): ...
    @property
    def AsBlob(self): ...
    @property
    def IsAnyVector(self): ...
    @property
    def IsVector(self): ...
    @property
    def AsVector(self): ...
    @property
    def IsTypedVector(self): ...
    @property
    def AsTypedVector(self): ...
    @property
    def IsFixedTypedVector(self): ...
    @property
    def AsFixedTypedVector(self): ...
    @property
    def IsMap(self): ...
    @property
    def AsMap(self): ...
    @property
    def Value(self): ...

class Value:
    @staticmethod
    def Null(): ...
    @staticmethod
    def Bool(value): ...
    @staticmethod
    def Int(value, bit_width): ...
    @staticmethod
    def UInt(value, bit_width): ...
    @staticmethod
    def Float(value, bit_width): ...
    @staticmethod
    def Key(offset): ...
    def __init__(self, value, type_, min_bit_width) -> None: ...
    @property
    def Value(self): ...
    @property
    def Type(self): ...
    @property
    def MinBitWidth(self): ...
    def StoredPackedType(self, parent_bit_width=...): ...
    def ElemWidth(self, buf_size, elem_index: int = 0): ...
    def StoredWidth(self, parent_bit_width=...): ...

class Pool:
    def __init__(self) -> None: ...
    def FindOrInsert(self, data, offset): ...
    def Clear(self) -> None: ...
    @property
    def Elements(self): ...

class Builder:
    def __init__(self, share_strings: bool = False, share_keys: bool = True, force_min_bit_width=...) -> None: ...
    def __len__(self) -> int: ...
    @property
    def StringPool(self): ...
    @property
    def KeyPool(self): ...
    def Clear(self) -> None: ...
    finished: bool
    def Finish(self): ...
    def String(self, value): ...
    def Blob(self, value): ...
    def Key(self, value): ...
    def Null(self, key: Incomplete | None = None) -> None: ...
    def Bool(self, value) -> None: ...
    def Int(self, value, byte_width: int = 0) -> None: ...
    def IndirectInt(self, value, byte_width: int = 0) -> None: ...
    def UInt(self, value, byte_width: int = 0) -> None: ...
    def IndirectUInt(self, value, byte_width: int = 0) -> None: ...
    def Float(self, value, byte_width: int = 0) -> None: ...
    def IndirectFloat(self, value, byte_width: int = 0) -> None: ...
    def Vector(self, key: Incomplete | None = None) -> Generator[Incomplete, None, None]: ...
    def VectorFromElements(self, elements) -> None: ...
    def TypedVector(self, key: Incomplete | None = None) -> Generator[Incomplete, None, None]: ...
    def TypedVectorFromElements(self, elements, element_type: Incomplete | None = None) -> None: ...
    def FixedTypedVectorFromElements(self, elements, element_type: Incomplete | None = None, byte_width: int = 0) -> None: ...
    def Map(self, key: Incomplete | None = None) -> Generator[Incomplete, None, None]: ...
    def MapFromElements(self, elements) -> None: ...
    def Adder(self, type_): ...
    def Add(self, value) -> None: ...
    @property
    def LastValue(self): ...
    def ReuseValue(self, value) -> None: ...

def GetRoot(buf): ...
def Dumps(obj): ...
def Loads(buf): ...
